
package com.food.Food.controller;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.Food.Food.dao.QualityDao;
import com.Food.Food.dao.FoodDao;
import com.Food.Food.dto.Quality;
import com.Food.Food.dto.Taste;
import com.Food.Food.repository.QualityRepo;
import com.Food.Food.repository.TasteRepo;
@RestController
@RequestMapping("/quality")
public class QualityController {
	@Autowired
	QualityDao qualityDao;
	
	@Autowired
	FoodDao FoodDao;
	
	@PutMapping("/updatequality/{foodId}")
	public Quality insert(@PathVariable int foodId, @RequestBody Quality quality) {
	    Optional<Food> optionalFood = foodDao.getFodById(foodId);
	    if (optionalFood.isPresent()) {
	        Food food= optionalFood.get();
	        quality.setFood(food);
	        return qualityDao.saveQuality(quality);
	    } else {
	        throw new RuntimeException("Food not found");
	    }
	}
	@GetMapping("/getall")
	public List<Quality> getAllQualities() {
	    List<Branch> qualities = qualityDao.getAllQualities();
	    if (Qualities.isEmpty()) {
	        return null;
	    } else {
	        return qualities;
	    }
	}
    
	// Update a Quality by ID
	@PostMapping("/update") 
	public Quality updateQualityById(@RequestBody Quality quality) {
		     int id = quality.getId();
	    Optional<Quality> optionalQuality = qualityRepo.findById(id);
	    if (optionalQuality.isPresent()) {
	        Quality existingQuality = optionalQuality.get();
	        existingQuality.setName(quality.getName());
	        existingQuality.setAddress(quality.getAddress());
	        existingQuality.setMail(quality.getMail());
	        
	        
	        return qualityRepo.save(existingQuality);
	    } else {
	        return null;
	    }
	}
	
	@GetMapping("/get/{id}")
	public Quality getQualityById(@PathVariable int id) {
		Optional<Quality> quality = qualityDao.getQualityById(id);
		if(quality.isEmpty())
			return null;
		else
			return quality.get();
	}
	
	@DeleteMapping("/delete/{id}")
	public void deletebyid(@PathVariable int id)
	{
		qualityRepo.deleteById(id);
		
	}
	
	
	@Autowired
	QualityRepo qualityRepo;
	@Autowired
	TasteRepo tasteRepo;
	@PostMapping("/insert")
	public Quality insert(@RequestBody Quality quality) {
		List<Taste> tastelist = quality.getTaste();
		List<Taste> enc = new ArrayList<>();
		if(tastelist.isEmpty())
		{
			quality = qualityRepo.save(quality);
		
		}
		else
		{
			quality = qualityRepo.save(quality);
			for(Taste taste:tastelist)
			{
				taste.setQuality(quality);
				enc.add(tasteRepo.save(taste));
			
			}
			quality.setTaste(tst);
			
		}
		
		return quality;
               }
           }